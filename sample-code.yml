AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a VPC with subnets, NAT Gateway, security groups, an ALB, and a CI/CD pipeline.

Parameters:
VPCID:
   Type: String
   Description: The ID of the VPC where resources will be created.

Resources:
MyVPC:
   Type: AWS::EC2::VPC
   Properties:
     CidrBlock: 10.10.10.0/24
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
       - Key: Name
         Value: my-vpc

PublicSubnet1:
   Type: AWS::EC2::Subnet
   Properties:
     VpcId: !Ref MyVPC
     CidrBlock: 10.10.10.0/25
     AvailabilityZone: !Select [0, !GetAZs '']
     MapPublicIpOnLaunch: true
     Tags:
       - Key: Name
         Value: public-subnet-1

PublicSubnet2:
   Type: AWS::EC2::Subnet
   Properties:
     VpcId: !Ref MyVPC
     CidrBlock: 10.10.10.128/25
     AvailabilityZone: !Select [1, !GetAZs '']
     MapPublicIpOnLaunch: true
     Tags:
       - Key: Name
         Value: public-subnet-2

PrivateSubnet1:
   Type: AWS::EC2::Subnet
   Properties:
     VpcId: !Ref MyVPC
     CidrBlock: 10.10.10.0/25
     AvailabilityZone: !Select [0, !GetAZs '']
     Tags:
       - Key: Name
         Value: private-subnet-1

PrivateSubnet2:
   Type: AWS::EC2::Subnet
   Properties:
     VpcId: !Ref MyVPC
     CidrBlock: 10.10.10.128/25
     AvailabilityZone: !Select [1, !GetAZs '']
     Tags:
       - Key: Name
         Value: private-subnet-2

MyInternetGateway:
   Type: AWS::EC2::InternetGateway
   Properties:
     Tags:
       - Key: Name
         Value: my-internet-gateway

AttachGateway:
   Type: AWS::EC2::VPCGatewayAttachment
   Properties:
     VpcId: !Ref MyVPC
     InternetGatewayId: !Ref MyInternetGateway

MyEIP:
   Type: AWS::EC2::EIP
   Properties:
     Domain: vpc

MyNatGateway:
   Type: AWS::EC2::NatGateway
   Properties:
     AllocationId: !GetAtt MyEIP.AllocationId
     SubnetId: !Ref PublicSubnet1
     Tags:
       - Key: Name
         Value: my-nat-gateway

PublicRouteTable:
   Type: AWS::EC2::RouteTable
   Properties:
     VpcId: !Ref MyVPC
     Tags:
       - Key: Name
         Value: public-route-table

PublicRoute:
   Type: AWS::EC2::Route
   Properties:
     RouteTableId: !Ref PublicRouteTable
     DestinationCidrBlock: 0.0.0.0/0
     GatewayId: !Ref MyInternetGateway

AssociatePublicRouteTable1:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties:
     SubnetId: !Ref PublicSubnet1
     RouteTableId: !Ref PublicRouteTable

AssociatePublicRouteTable2:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties:
     SubnetId: !Ref PublicSubnet2
     RouteTableId: !Ref PublicRouteTable

PrivateRouteTable:
   Type: AWS::EC2::RouteTable
   Properties:
     VpcId: !Ref MyVPC
     Tags:
       - Key: Name
         Value: private-route-table

PrivateRoute:
   Type: AWS::EC2::Route
   Properties:
     RouteTableId: !Ref PrivateRouteTable
     DestinationCidrBlock: 0.0.0.0/0
     NatGatewayId: !Ref MyNatGateway

AssociatePrivateRouteTable1:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties:
     SubnetId: !Ref PrivateSubnet1
     RouteTableId: !Ref PrivateRouteTable

AssociatePrivateRouteTable2:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties:
     SubnetId: !Ref PrivateSubnet2
     RouteTableId: !Ref PrivateRouteTable

ALBSecurityGroup:
   Type: AWS::EC2::SecurityGroup
   Properties:
     GroupDescription: "Security group for ALB"
     VpcId: !Ref MyVPC
     SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 80
         ToPort: 80
         CidrIp: 0.0.0.0/0

EC2SecurityGroup:
   Type: AWS::EC2::SecurityGroup
   Properties:
     GroupDescription: "Security group for EC2 instances"
     VpcId: !Ref MyVPC
     SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 80
         ToPort: 80
         SourceSecurityGroupId: !Ref ALBSecurityGroup
       - IpProtocol: tcp
         FromPort: 443
         ToPort: 443
         SourceSecurityGroupId: !Ref ALBSecurityGroup
       - IpProtocol: tcp
         FromPort: 22
         ToPort: 22
         CidrIp: 0.0.0.0/0

SSMEndpoint:
   Type: AWS::EC2::VPCEndpoint
   Properties:
     ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
     VpcId: !Ref MyVPC
     SubnetIds:
       - !Ref PrivateSubnet1
       - !Ref PrivateSubnet2
     VpcEndpointType: Interface

EC2MessagesEndpoint:
   Type: AWS::EC2::VPCEndpoint
   Properties:
     ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
     VpcId: !Ref MyVPC
     SubnetIds:
       - !Ref PrivateSubnet1
       - !Ref PrivateSubnet2
     VpcEndpointType: Interface

PrivateEC2Instance:
   Type: AWS::EC2::Instance
   Properties:
     InstanceType: t2.micro
     ImageId: ami-0abcdef1234567890  # Update with a valid AMI ID
     SubnetId: !Ref PrivateSubnet1
     SecurityGroupIds:
       - !Ref EC2SecurityGroup
     UserData:
       Fn::Base64: !Sub |
         #!/bin/bash
         yum update -y
         yum install -y python3 java-1.8.0-openjdk
     Tags:
       - Key: Name
         Value: private-ec2-instance

MyALB:
   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
   Properties:
     Name: my-alb
     Subnets:
       - !Ref PublicSubnet1
       - !Ref PublicSubnet2
     SecurityGroups:
       - !Ref ALBSecurityGroup
     LoadBalancerAttributes:
       - Key: idle_timeout.timeout_seconds
         Value: 60
     Scheme: internet-facing
     Type: application
     IpAddressType: ipv4

MyCodeBuildProject:
   Type: AWS::CodeBuild::Project
   Properties:
     Name: my-build-project
     Source:
       Type: GITHUB
       Location: https://github.com/my-repo/my-app
       BuildSpec: buildspec.yml
     Artifacts:
       Type: NO_ARTIFACTS
     Environment:
       ComputeType: BUILD_GENERAL1_SMALL
       Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
       Type: LINUX_CONTAINER
     ServiceRole: !GetAtt CodeBuildRole.Arn

CodeBuildRole:
   Type: AWS::IAM::Role
   Properties:
     AssumeRolePolicyDocument:
       Version: "2012-10-17"
       Statement:
         - Effect: Allow
           Principal:
             Service: codebuild.amazonaws.com
           Action: sts:AssumeRole
     ManagedPolicyArns:
       - arn:aws:iam::aws:policy/service-role/AWSCodeBuildAdminAccess
     RoleName: CodeBuildRole

Outputs:
VPCId:
   Description: "VPC ID"
   Value: !Ref MyVPC

PublicSubnet1Id:
   Description: "Public Subnet 1 ID"
   Value: !Ref PublicSubnet1

PublicSubnet2Id:
   Description: "Public Subnet 2 ID"
   Value: !Ref PublicSubnet2

PrivateSubnet1Id:
   Description: "Private Subnet 1 ID"
   Value: !Ref PrivateSubnet1

PrivateSubnet2Id:
   Description: "Private Subnet 2 ID"
   Value: !Ref PrivateSubnet2

ALBArn:
   Description: "ARN of the Application Load Balancer"
   Value: !GetAtt MyALB.Arn
